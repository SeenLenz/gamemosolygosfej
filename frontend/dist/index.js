(()=>{"use strict";var t={752:(t,e,s)=>{e.QX=e.nS=e.jG=void 0;const i=s(947),r=s(254),o=s(15),a=s(125);document.addEventListener("DOMContentLoaded",(()=>{e.jG.setup(),n()})),e.jG=new i.Renderer,new r.EventHandler(e.jG),e.nS=new a.Camera,e.QX=.2;let h=1;function n(){const t=(performance.now()-h)/10;h=performance.now(),e.jG.run(e.nS.convert()),o.GameObject.objects.forEach((e=>{e.run(t),e.render()})),requestAnimationFrame(n)}},131:(t,e)=>{e.eG=void 0,e.eG=class{constructor(t,e){this.vertex_buffer=e.create_buffer(e.gl.ARRAY_BUFFER,t.positions,"a_pos"),this.index_buffer=e.gl.createBuffer(),e.gl.bindBuffer(e.gl.ELEMENT_ARRAY_BUFFER,this.index_buffer),e.gl.bufferData(e.gl.ELEMENT_ARRAY_BUFFER,t.indicies,e.gl.STATIC_DRAW),this.color_buffer=e.create_buffer(e.gl.ARRAY_BUFFER,t.colors,"a_color")}render(t,e,s){t.gl.uniform3f(t.uniform_transform,e.x,e.y,1),t.gl.enableVertexAttribArray(this.vertex_buffer.attribute),t.gl.bindBuffer(t.gl.ARRAY_BUFFER,this.vertex_buffer.buffer),t.gl.vertexAttribPointer(this.vertex_buffer.attribute,2,t.gl.FLOAT,!1,0,0),t.gl.enableVertexAttribArray(this.color_buffer.attribute),t.gl.bindBuffer(t.gl.ARRAY_BUFFER,this.color_buffer.buffer),t.gl.vertexAttribPointer(this.color_buffer.attribute,3,t.gl.FLOAT,!1,0,0),t.gl.bindBuffer(t.gl.ELEMENT_ARRAY_BUFFER,this.index_buffer),t.gl.drawElements(t.gl.TRIANGLES,6,t.gl.UNSIGNED_SHORT,0)}}},947:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Renderer=void 0;const i=s(920);e.Renderer=class{constructor(){const t=document.querySelector("#vertex_shader"),e=document.querySelector("#fragment_shader");if(!t||!e)throw new Error("Vertex or fragment shader element not found.");const s=t.textContent||"",r=e.textContent||"";this.canvas=document.querySelector("#main_canvas"),this.gl=this.canvas.getContext("webgl2"),this.vertex_shader=i.setup.create_shader(this.gl,this.gl.VERTEX_SHADER,s),this.fragment_shader=i.setup.create_shader(this.gl,this.gl.FRAGMENT_SHADER,r),this.program=i.setup.create_program(this.gl,this.vertex_shader,this.fragment_shader),this.uniform_resolution=null,this.uniform_transform=null,this.camera=null,this.textures=[]}create_buffer(t,e,s){let i=this.gl.getAttribLocation(this.program,s),r=this.gl.createBuffer();return this.gl.bindBuffer(t,r),this.gl.bufferData(this.gl.ARRAY_BUFFER,new Float32Array(e),this.gl.STATIC_DRAW),{buffer:r,attribute:i}}create_texture(t){let e=this.gl.createTexture();this.gl.bindTexture(this.gl.TEXTURE_2D,e),this.gl.texImage2D(this.gl.TEXTURE_2D,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,new Uint8Array([0,0,255,255]));let s=new Image;s.src=t,s.addEventListener("load",(()=>{this.gl.bindTexture(this.gl.TEXTURE_2D,e),this.gl.texImage2D(this.gl.TEXTURE_2D,0,this.gl.RGBA,this.gl.RGBA,this.gl.UNSIGNED_BYTE,s),this.gl.generateMipmap(this.gl.TEXTURE_2D)})),this.textures.push(e)}setup(){this.gl.canvas.width=this.canvas.clientWidth,this.gl.canvas.height=this.canvas.clientHeight,this.gl.viewport(0,0,this.gl.canvas.width,this.gl.canvas.height),this.uniform_resolution=this.gl.getUniformLocation(this.program,"u_res"),this.uniform_transform=this.gl.getUniformLocation(this.program,"u_transform"),this.camera=this.gl.getUniformLocation(this.program,"camera")}run(t){this.gl.clearColor(0,0,0,1),this.gl.clear(this.gl.COLOR_BUFFER_BIT),this.gl.useProgram(this.program),this.gl.uniform2f(this.uniform_resolution,this.gl.canvas.width,this.gl.canvas.height),this.gl.uniform3fv(this.camera,t)}}},920:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.setup=void 0,e.setup={create_shader:function(t,e,s){var i=t.createShader(e);if(t.shaderSource(i,s),t.compileShader(i),t.getShaderParameter(i,t.COMPILE_STATUS))return i;console.log(t.getShaderInfoLog(i)),t.deleteShader(i)},create_program:function(t,e,s){var i=t.createProgram();if(t.attachShader(i,e),t.attachShader(i,s),t.linkProgram(i),t.getProgramParameter(i,t.LINK_STATUS))return i;console.log(t.getProgramInfoLog(i)),t.deleteProgram(i)}}},125:(t,e,s)=>{s.r(e),s.d(e,{Camera:()=>r});var i=s(752);class r{constructor(){this.pos={x:0,y:0},this.scale=.5}convert(){return Float32Array(this.pos.x,this.pos.y,this.scale)}get zero(){return{y:this.pos.y-i.jG.canvas.height*this.scale,x:this.pos.x-i.jG.canvas.width*this.scale}}get width(){return i.jG.canvas.width/this.scale}get height(){return i.jG.canvas.height/this.scale}focus_on(t){this.pos.x=t.object.transform.pos.x,this.pos.y=t.object.transform.pos.y-i.jG.canvas.height/2}}},254:(t,e,s)=>{s.r(e),s.d(e,{EventHandler:()=>i}),s(752);class i{constructor(t){this.mouse={pos:{x:0,y:0},prev_pos:{x:0,y:0},leftClick:!1},this.keys={w:!1,a:!1,s:!1,d:!1},window.addEventListener("mousemove",(t=>{this.mouse.prev_pos=this.mouse.pos,this.mouse.pos=t})),window.addEventListener("mousedown",(t=>{0===t.button&&(this.mouse.leftClick=!0)})),window.addEventListener("mouseup",(t=>{0===t.button&&(this.mouse.leftClick=!1)})),document.addEventListener("keypress",(t=>{"KeyW"==t.code&&(this.keys.w=!0)})),document.addEventListener("keydown",(t=>{"w"===t.key&&(this.keys.w=!0)})),document.addEventListener("keyup",(t=>{"w"===t.key&&(this.keys.w=!1)})),window.addEventListener("resize",(e=>{t.gl.canvas.width=t.gl.canvas.clientWidth,t.gl.canvas.height=t.gl.canvas.clientHeight,t.gl.viewport(0,0,t.gl.canvas.width,t.gl.canvas.height)}))}}},15:(t,e,s)=>{s.r(e),s.d(e,{DynamicGameObj:()=>h,GameObject:()=>o,StaticGameObj:()=>a});var i=s(131),r=s(752);class o{constructor(t,e,s,r){let a=(0,i.quad)(e[0],e[1],r);this.object=new i.eG(a.positions,a.indicies,a.color,t,e[0],e[1]),this.mass=e[0]*e[1],this.object_tag,this.isDynamic=!1,o.objects.push(this),this.collidable=!0,this.pos={x:s[0],y:s[1]},this.scale={x:e[0],y:e[1]}}render(){this.object.render(r.jG,this.pos,this.scale)}static objects=[]}class a extends o{constructor(t,e,s,i){super(t,e,s,i)}run(){}}class h extends o{constructor(t,e,s,i){super(t,e,s,i),this.isDynamic=!0,this.reactive=!1,this.velocity={x:0,y:0},this.force={x:0,y:0}}start(){}get acceleration(){return{x:this.force.x/this.mass,y:this.force.y/this.mass}}add_force(t){this.force.x+=t[0],this.force.x+=t[1]}collide(t){let e=[];for(let s of o.objects){if(this.isDynamic&&!this.reactive&&s.isDynamic||s.isDynamic&&!s.reactive&&this.isDynamic)continue;if(!this.collidable||!s.collidable||s==this)continue;let i=this.pos.x+this.scale.x-s.pos.x+this.velocity.x*t,r=this.pos.y+this.scale.y-s.pos.y+this.velocity.y*t;if(s.isDynamic&&(i-=s.velocity.x*t,r-=s.velocity.y*t),i>0&&i<this.scale.x+s.scale.x&&r>0&&r<this.scale.y+s.scale.y){let t=Math.min(this.pos.x,s.pos.x),i=Math.max(this.pos.x+this.scale.x,s.pos.x+s.scale.x),r=Math.min(this.pos.y,s.pos.y),o=Math.max(this.pos.y+this.scale.y,s.pos.y+s.scale.y);if(Math.abs(s.scale.x-(i-t-this.scale.x))<Math.abs(s.scale.y-(o-r-this.scale.y))?Math.abs(s.pos.x-this.pos.x)<Math.abs(s.pos.x+s.scale.x-this.pos.x)?e.push({obj:s,x:1,y:0}):e.push({obj:s,x:-1,y:0}):Math.abs(s.pos.y-this.pos.y)<Math.abs(s.pos.y+s.scale.y-this.pos.y)?e.push({obj:s,x:0,y:1}):e.push({obj:s,x:0,y:-1}),4==e.length)return e}}return e}collision(t){const e=this.collide(t);for(let t of e)this.on_collision(t)}motion(t){this.velocity.y+=this.force.y/this.mass*t,this.velocity.x+=this.force.x/this.mass*t,this.velocity.y=Math.abs(this.velocity.y)<t*r.QX?0:this.velocity.y,this.pos.y+=this.velocity.y*t,this.pos.x+=this.velocity.x*t}run(t){}on_collision(t){0!=t.x?this.on_collision_x(t.obj,t.x):this.on_collision_y(t.obj,t.y)}on_collision_x(t,e){this.pos.x=-1==e?t.pos.x+t.scale.x:t.pos.x-this.scale.x}on_collision_y(t,e){this.pos.y=-1==e?t.pos.y+t.scale.y:t.pos.y-this.scale.y,this.velocity.y=.3*(-this.velocity.y+this.force.y/this.mass)}}}},e={};function s(i){var r=e[i];if(void 0!==r)return r.exports;var o=e[i]={exports:{}};return t[i](o,o.exports,s),o.exports}s.d=(t,e)=>{for(var i in e)s.o(e,i)&&!s.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},s.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),s.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s(752)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,